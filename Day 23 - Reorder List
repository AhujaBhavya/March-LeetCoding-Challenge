ListNode* reverseList(ListNode* head) {
    ListNode *prev = nullptr;
    ListNode *current = head;
    ListNode *nextNode = nullptr;

    while (current != nullptr) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    return prev;
}
class Solution {
public:
    void reorderList(ListNode* head) {
        if (head == nullptr || head->next == nullptr)
           return;
        ListNode *slow = head;
        ListNode *fast = head;

        while (fast->next != nullptr && fast->next->next != nullptr) {
           slow = slow->next;
           fast = fast->next->next;
        }   
        ListNode *secondHalf = slow->next;
           slow->next = nullptr;
           secondHalf = reverseList(secondHalf);  
           ListNode *current = head;
        while (secondHalf != nullptr) {
           ListNode *temp1 = current->next;
           ListNode *temp2 = secondHalf->next;

           current->next = secondHalf;
           secondHalf->next = temp1;

           current = temp1;
           secondHalf = temp2;
       }
    }
};
